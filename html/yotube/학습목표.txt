해커뉴스 API활용한 실습의 두 번째 버전이다.
 step1단계

1. 외부 서버를 활용하는 연습이다
2.비동기 통신 객체를 활용하여 처리해 본다. - XMLHttpRequest
3.Restful API란? - GET방식 처리해 본다.
4.제공되는 내장객체로 속성이나 함수를 호출할 수 있다.
5.DOM API를 직접 활용하는 건 직관적이지 않다. 불편했다
document.createElement();
document.XXXX();
그래서 문자 리터럴로 다시 정의하였다.
DOM API로 DOM을 그리지 않고 문자열(ejs 템플릿엔진 만나게 되었다)로 처리하였다 - 
:왜냐면 코드양은 늘어나지만 복잡도가 증가하는 건 아니어서 괜찮았다
:한눈에 몇번째 태그에 붙는 속성인지 이벤트 함수인지 분명히 보였다
6. document.querySelector('#root').innerHTML = 문자열로 구성된 태그들을 넣어줌
<div id='root'>빈깡통</div>
7. const arr = [];
:array의 내장함수인 push(), 배열에 들어있는 DOM 요소들을 한 문자열로 합침 -join('')

step2
step1에서 문자열로 된 부분을 굳이 배열로 바꾸어 본다.
const videoList = [];
1)  push - 맨뒤에 추가하기
2) 1번을 통해서 배열에 태그를 담았다 - 배열에서 꺼내서 한 문자열로 묶어준다. - join('') - 디폴트가  콤마이라서
태그는 브라우저가 인터프리터의 역할을 함

-------------- 중간점검 ---------------
무엇을 위한 1단계와 2단계 이었나

태그와 자바스크립트(나중엔 java)코드의 섞어쓰기를 최대한 지양하자
화면과 로직은 분리하는게 좋지않나? - 후배  좋아요
DOM API로 하나? - 구조가 안보여서 후지다
문자열로 수정할 페이지를 묶어주면 구조가 잘 보이지? - 응 - 양은 늘어났어요
양은 늘어나더라도  복잡도가 증가되지는 않으니까 이대로 갑시다.

handlerbas등장 - 태그사이에 자바,자스코드가 안보임
템플릿 엔진 태그 앞뒤에 {{each documents}} 태그 중략............................{{/each}}
const temp = [];
